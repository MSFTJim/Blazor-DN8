@page "/MyForm"
@rendermode InteractiveAuto
@inject ILogger<MyForm> logger;


<div class="card">
    <div class="card-header">
        <h3 style="text-align:center">My Form</h3>
    </div>
    <div class="card-body">
        <EditForm Enhance Model="@Person" method="post" FormName="myPersonForm" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col">
                    <label>First Name</label>
                    <InputText @bind-Value="Person.FirstName" />
                    <ValidationMessage For="@(() => Person.FirstName)" />
                    <br />
                    <br />
                    <label>Last Name</label>
                    <InputText @bind-Value="Person.LastName" />
                    <ValidationMessage For="@(() => Person.LastName)" />
                    <br />
                    <br />
                    <label>Birthdate</label>
                    <InputDate @bind-Value="Person.BirthDate" />
                    <br />
                    <br />
                    <label>Birthdate Only</label>
                    <InputDate @bind-Value="Person.BirthDateOnly" />     
                    <ValidationMessage For="@(() => Person.BirthDateOnly)" />
                    <br />
                    <br />
                    <label>Department</label>
                    <br />
                    <InputRadioGroup @bind-Value="Person.Departnment" >
                        @foreach (var department in departments)
                        {
                            <InputRadio Value="department"/>@department <br />
                        }
                    </InputRadioGroup>
                    <br />
                    <br />
                    <label>Employment Type</label>
                    <br />
                    <InputRadioGroup @bind-Value="Person.TypeofEmployment">
                        @foreach (var toe in Enum.GetValues<EmploymentType>())
                        {
                            <InputRadio Value="toe" /> @toe.ToString() <br />
                        }                        
                    </InputRadioGroup>
                </div> @*column left *@
                <div class="col">
                    <label>Life Story</label> <br />
                    <InputTextArea @bind-Value="Person.LifeStory" rows=4 />
                    <br /> 
                    <label>IsAlive</label> <br />
                    <InputCheckbox @bind-Value="Person.IsAlive"  />
                    <br />
                    <br />
                    <label>Age</label> <br />
                    <InputNumber @bind-Value="Person.Age" />
                    <ValidationMessage For="@(() => Person.Age)" />
                    <br />
                    <br />
                    <label>Amount</label> <br />
                    <InputNumber @bind-Value="Person.Amount" />
                    <ValidationMessage For="@(() => Person.Amount)" />
                    <br />
                    <br />
                    <label>Gender</label>
                    <br />
                    <InputSelect @bind-Value="Person.Gender">
                        @foreach (var sex in GenderTypes)
                        {
                            <option value="@sex"> @sex</option> <br />
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Person.Gender)" />
                </div> @*column right *@
            </div> @*row *@
            <br />
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>

</div>

<ul>
    @foreach (var person in people)
    {
        <li>@person.FirstName @person.LastName @person.Gender @person.Departnment @person.TypeofEmployment</li>
    }
</ul>

@code {

    [SupplyParameterFromForm]
    private PersonModel Person { get; set; } = new();
    private List<PersonModel> people = new();
    private List<string> departments = new() { "One", "Two", "Three" };
    private List<string> GenderTypes = new() { "Male", "Female", "Transgender", "Non-Binary", "Other" };

    private void SubmitForm()
    {
        logger.LogInformation($"{Person.FirstName} {Person.LastName} {Person.LifeStory}");
        people.Add(Person);
        Person = new();
    }

}